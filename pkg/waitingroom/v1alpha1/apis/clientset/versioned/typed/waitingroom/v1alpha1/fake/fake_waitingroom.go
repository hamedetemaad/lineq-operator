/* AUTO GENERATED CODE */
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1alpha1 "github.com/hamedetemaad/lineq-operator/pkg/waitingroom/v1alpha1"
	waitingroomv1alpha1 "github.com/hamedetemaad/lineq-operator/pkg/waitingroom/v1alpha1/apis/applyconfiguration/waitingroom/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeWaitingRooms implements WaitingRoomInterface
type FakeWaitingRooms struct {
	Fake *FakeLineqV1alpha1
	ns   string
}

var waitingroomsResource = v1alpha1.SchemeGroupVersion.WithResource("waitingrooms")

var waitingroomsKind = v1alpha1.SchemeGroupVersion.WithKind("WaitingRoom")

// Get takes name of the waitingRoom, and returns the corresponding waitingRoom object, and an error if there is any.
func (c *FakeWaitingRooms) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.WaitingRoom, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(waitingroomsResource, c.ns, name), &v1alpha1.WaitingRoom{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.WaitingRoom), err
}

// List takes label and field selectors, and returns the list of WaitingRooms that match those selectors.
func (c *FakeWaitingRooms) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.WaitingRoomList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(waitingroomsResource, waitingroomsKind, c.ns, opts), &v1alpha1.WaitingRoomList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.WaitingRoomList{ListMeta: obj.(*v1alpha1.WaitingRoomList).ListMeta}
	for _, item := range obj.(*v1alpha1.WaitingRoomList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested waitingRooms.
func (c *FakeWaitingRooms) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(waitingroomsResource, c.ns, opts))

}

// Create takes the representation of a waitingRoom and creates it.  Returns the server's representation of the waitingRoom, and an error, if there is any.
func (c *FakeWaitingRooms) Create(ctx context.Context, waitingRoom *v1alpha1.WaitingRoom, opts v1.CreateOptions) (result *v1alpha1.WaitingRoom, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(waitingroomsResource, c.ns, waitingRoom), &v1alpha1.WaitingRoom{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.WaitingRoom), err
}

// Update takes the representation of a waitingRoom and updates it. Returns the server's representation of the waitingRoom, and an error, if there is any.
func (c *FakeWaitingRooms) Update(ctx context.Context, waitingRoom *v1alpha1.WaitingRoom, opts v1.UpdateOptions) (result *v1alpha1.WaitingRoom, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(waitingroomsResource, c.ns, waitingRoom), &v1alpha1.WaitingRoom{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.WaitingRoom), err
}

// Delete takes name of the waitingRoom and deletes it. Returns an error if one occurs.
func (c *FakeWaitingRooms) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(waitingroomsResource, c.ns, name, opts), &v1alpha1.WaitingRoom{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeWaitingRooms) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(waitingroomsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.WaitingRoomList{})
	return err
}

// Patch applies the patch and returns the patched waitingRoom.
func (c *FakeWaitingRooms) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.WaitingRoom, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(waitingroomsResource, c.ns, name, pt, data, subresources...), &v1alpha1.WaitingRoom{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.WaitingRoom), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied waitingRoom.
func (c *FakeWaitingRooms) Apply(ctx context.Context, waitingRoom *waitingroomv1alpha1.WaitingRoomApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.WaitingRoom, err error) {
	if waitingRoom == nil {
		return nil, fmt.Errorf("waitingRoom provided to Apply must not be nil")
	}
	data, err := json.Marshal(waitingRoom)
	if err != nil {
		return nil, err
	}
	name := waitingRoom.Name
	if name == nil {
		return nil, fmt.Errorf("waitingRoom.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(waitingroomsResource, c.ns, *name, types.ApplyPatchType, data), &v1alpha1.WaitingRoom{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.WaitingRoom), err
}
